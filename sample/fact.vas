       LDA  L0,R1                        \ Set stack pointer
       LDA  L0,R5
       STI  R1,0(R1)                     \ Save on stack
       LDA  L1,R3                        \ Return address for main routine
\        var i
\        var j
\        label L16
L16:
\        beginfunc
       STI  R3,4(R1)
\        j := 1
       LDA  1(R0),R6
\        i := 0
       LDR  R0,R7
\        label L14
       STI  R6,12(R15)
       STI  R7,8(R15)
L14:
\        var T0
\        T0 := 11 - i
       LDI  8(R15),R6
       LDA  11(R0),R7
       SUB  R7,R6
\        ifz T0 goto L15
       STI  R6,16(R1)
       LDR  R6,R6
       BZE  L15
\        arg L11
       LDA  L11,R8
       STI  R8,28(R1)
\        call L4
       LDA  L4,R2
       STI  R1,20(R1)
       LDA  20(R1),R1
       BAL  R2,R3
\        arg i
       LDI  8(R15),R6
       STI  R6,28(R1)
\        call L2
       LDA  L2,R2
       STI  R1,20(R1)
       LDA  20(R1),R1
       BAL  R2,R3
\        arg L12
       LDA  L12,R6
       STI  R6,28(R1)
\        call L4
       LDA  L4,R2
       STI  R1,20(R1)
       LDA  20(R1),R1
       BAL  R2,R3
\        var T1
\        arg i
       LDI  8(R15),R6
       STI  R6,32(R1)
\        T1 = call L19
       LDA  L19,R2
       STI  R1,24(R1)
       LDA  24(R1),R1
       BAL  R2,R3
\        arg T1
       LDR  R4,R6
       STI  R6,32(R1)
\        call L2
       STI  R6,20(R1)
       LDA  L2,R2
       STI  R1,24(R1)
       LDA  24(R1),R1
       BAL  R2,R3
\        arg L13
       LDA  L13,R6
       STI  R6,32(R1)
\        call L4
       LDA  L4,R2
       STI  R1,24(R1)
       LDA  24(R1),R1
       BAL  R2,R3
\        var T2
\        T2 := i + 1
       LDA  1(R0),R6
       LDI  8(R15),R7
       ADD  R7,R6
\        i := T2
       STI  R6,24(R1)
\        goto L14
       STI  R6,8(R15)
       BRA  L14
\        label L15
L15:
\        endfunc
       LDI  4(R1),R2
       LDI  0(R1),R1
       BAL  R2,R3
\        label L19
L19:
\        beginfunc
       STI  R3,4(R1)
\        var n
\        ifz n goto L17
       LDI  8(R1),R6
       BZE  L17
\        var T4
\        var T3
\        T3 := n - 1
       LDA  1(R0),R7
       SUB  R6,R7
\        arg T3
       STI  R7,16(R1)
       STI  R7,28(R1)
\        T4 = call L19
       LDA  L19,R2
       STI  R1,20(R1)
       LDA  20(R1),R1
       BAL  R2,R3
\        var T5
\        T5 := n * T4
       LDR  R4,R6
       LDI  8(R1),R7
       MUL  R7,R6
\        return T5
       STI  R4,12(R1)
       LDR  R6,R4
       LDI  4(R1),R2
       LDI  0(R1),R1
       BAL  R2,R3
\        goto L18
       BRA  L18
\        label L17
L17:
\        return 1
       LDA  1(R0),R4
       LDI  4(R1),R2
       LDI  0(R1),R1
       BAL  R2,R3
\        label L18
L18:
\        endfunc
       LDI  4(R1),R2
       LDI  0(R1),R1
       BAL  R2,R3
\      Library routines
\
\      Modifications:
\      ==============
\
\      26 Jan 96: Jeremy Bennett. Version for 2nd editon publication (unchanged
\                 from first edition.
\
\
\      End of run routine
\
L1:
       HALT
\
\      Print a number recursively
\
L2:
       STI  R3,4(R1)                     \ Save the return address
       LDI  8(R1),R15                    \ Copy arg to R15
       LDA  10(R0),R5                    \ Constant 10
       DIV  R15,R5                       \ Non-zero if more than one digit
       BZE  L3                           \ Branch if only 1 digit
\
       STI  R5,12(R1)                    \ Save on stack for later
       STI  R5,24(R1)                    \ Copy to new stack frame
       LDA  L2,R2                        \ Address to call
       STI  R1,16(R1)                    \ Save stack pointer
       LDA  16(R1),R1                    \ Increment stack pointer
       BAL  R2,R3                        \ Call recursively
       LDA  10(R0),R15                   \ Constant 10 in R15
       LDI  8(R1),R5                     \ Original number
       LDI  12(R1),R6                    \ Divided number
       MUL  R6,R15                       \ Multiply back by 10 in R15
       SUB  R5,R15                       \ Subtract from original for digit
L3:
       LDA  48(R0),R5                    \ ASCII '0' in R5
       ADD  R5,R15                       \ Add to get desired digit in R15
       TRAP                              \ Print the digit
       LDI  4(R1),R2                     \ Return address in R2
       LDI  0(R1),R1                     \ Restore stack pointer
       BAL  R2,R3                        \ Return
\
\      Print a string
\
L4:
       STI  R3,4(R1)                     \ Save the return address
       LDI  8(R1),R5                     \ String pointer in R5
       LDA  16777216(R0),R7              \ 256 cubed for shifting 24 bits right
L5:
       LDI  0(R5),R6                     \ Next char in top byte  of R6
       LDR  R7,R15                       \ Constant 256 cubed
       DIV  R6,R15                       \ Char in R15
       BZE  L6                           \ EOS branch to exit
       TRAP                              \ Print the char
       LDA  1(R5),R5                     \ Step to next char
       BRA  L5                           \ Round again
L6:
       LDI  4(R1),R2                     \ Return address in R2
       LDI  0(R1),R1                     \ Restore stack pointer
       BAL  R2,R3                        \ Return
\
L11:
       DB   102
       DB   40
       DB   32
       DB   0
L12:
       DB   32
       DB   41
       DB   32
       DB   61
       DB   32
       DB   0
L13:
       DB   10
       DB   0
L0:
